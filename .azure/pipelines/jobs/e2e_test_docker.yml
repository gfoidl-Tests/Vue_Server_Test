jobs:
  - job: e2e_test_docker
    displayName: e2e tests docker
    pool:
      vmImage: ubuntu-18.04
    variables:
      pfx_password: my_strong_password
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: image
          targetPath: $(Build.SourcesDirectory)

      - bash: |
          docker load -i image.tar.gz

          echo "-------------------------------------------------"
          docker images
        displayName: import docker image

      - bash: |
          echo "creating a self signed certificate with password: $PFX_PASSWORD"

          dotnet dev-certs https -ep $(pwd)/.aspnet/https/aspnetapp.pfx -p $PFX_PASSWORD

          echo "-------------------------------------------------"
          ls -laR $(pwd)/.aspnet
        displayName: create SSL certificate

      - bash: |
          docker run --rm -d \
                     --name web-app \
                     -e ASPNETCORE_Kestrel__Certificates__Default__Path=/app/https/aspnetapp.pfx \
                     -e ASPNETCORE_Kestrel__Certificates__Default__Password=$PFX_PASSWORD \
                     -v $(pwd)/.aspnet/https:/app/https/ \
                     -v $(pwd)/logs:/app/logs/ \
                     -p 443:443 \
                     -p 80:80 \
                     -e ASPNETCORE_URLS="https://+:443;http://+:80" \
                     $DOCKER_IMAGE_NAME

          echo "-------------------------------------------------"
          docker ps -a
        displayName: start container

      # docker takes a couple of seconds to start and build the network, so the immediate
      # check with curl would fail (Connection reset by peer, or any other failure)
      # so I could wait a bit, or just install npm-packages first
      - template: steps/frontend_packages.yml

      - bash: curl -v http://localhost
        displayName: check http://localhost
      - bash: curl -vk https://localhost
        displayName: check https://localhost

      - bash: |
          cd frontend

          export SERVER_TEST=1
          export JEST_PUPPETEER_CONFIG=tests/e2e-full/jest-puppeteer.config.server.js
          export HTTP_BASE_URL="http://localhost"
          export HTTPS_BASE_URL="https://localhost"

          yarn jest --projects tests/e2e-full --verbose --reporters=default --reporters=jest-junit
        displayName: test

      - bash: docker stop web-app
        displayName: stop container

      - task: PublishTestResults@2
        condition: always()
        inputs:
          testRunner: JUnit
          testResultsFiles: frontend/junit.xml

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Build.SourcesDirectory)/logs
          artifactName: logs-e2e-full-docker

      - task: PublishPipelineArtifact@1
        condition: always()
        displayName: upload screenshots
        inputs:
          targetPath: frontend/screenshots-e2e-full-server
          artifactName: screenshots-e2e-full-docker

      - bash: |
          cd frontend
          chmod +x tests/*.sh

          echo "-------------------------------------------------"
          echo "log-dir:"
          ls -la --color ../logs
          echo ""
          echo "-------------------------------------------------"

          export VERIFY_LISTEN_ON=1
          tests/verify-server-logs.sh ../logs
        displayName: verify server logs
